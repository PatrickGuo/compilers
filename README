[[Team Ramrod]]
  Atkin, Drew
  Mendelewski, John

[Integration]

[[Points of Interest]]

- To run a Tiger program...
  1. Compile the program with:

     - Tiger.compileFile "testcases/merge.tig";

  2. Concatentate the assmebled output with the runtime:

     $ cat testcases/merge.tig.s runtime.s > prog.s

  3. Execute it with spim!

     $ spim -file "prog.s"

- We hacked up the MIPS runtime available on Appel's site to work with our
runtime. Any other (non-broken) runtime ought to be compatible with our
compiler with the exception that initArray must handle a third argument
specificying the dimensionality of the array being initialized.

- Everything *seems* to work, but bug reports are welcome ;)
  * Static links
  * I/O
  * Functions with > 4 arguments (> 3 declared arguments)
  * Multidimensional arrays
  * Null dereference and array bounds checks

[Register Allocator]

[[Points of Interest]]
- We've implemented Appel's graph coloring register allocator with
spilling. Register and stack coalescing are not (yet) supported.

- procEntryExit{1,2,3} are complete, so aside from linking with the
runtime, the compiler is essentially done.

Compile a file with:

  Tiger.compileFile "testcases/fact.tig";

This will produce "testcases/fact.tig.s" which may be executed in
SPIM.

[Liveness Analysis Comments]

[[Points of Interest]]
- We've changed Appel's implementation of graph to use one of SML/NJ's
built-in Set functors rather than lists to eliminate redundant edges.
We've also augmented the table signature with a "get" method for
returning an item (rather than an item *option*) when we expect one to
be present.

[Instruction Selection Comments]

[[Points of Interest]]
- Our instruction selector emits code to save and restore *all* caller
and callee save registers to temporaries. We will implement a spilling
register allocator to eliminate extraneous callee register saves. It's
unclear to us if register allocation will also eliminate unneccesary
caller register saves, but if not we will fix this later.

[IR Translation Comments]

[[Points of Interest]]
- The transProg signature is:
  Absyn.exp -> {frags: Translate.Frame.frag list, ty: Types.ty}
This is to allow our tester to continue checking the expected types of
programs.

- We've implemented multidimensional arrays, with the following syntax:

let
  type matrix = array * array of int
  var A := matrix [5, 5] of 0
in
  A[0, 0]
end

- We've added a rudimentary "exception handler" to the end of the main
function, which can be jumped to when an error condition is encountered.
We perform null-pointer checks on all pointer dereferences making use of
this handler. We have *not* implemented array-bounds checking. However
we calculate the array size and save it to a register on each array
access, allowing us to easily implement bounds checking in the future.

- We've made the assumption that builtin functions are one-to-one with
with functions directly below the top level. Thus, functions with
Translate.outermost as their *parent* do not take a static link argument
(including main), and calls to them are implemented using the
Frame.callExternal mechanism.

[Frame Analysis Comments]

[[Points of Interest]]
Our frame analyzer allocates four argument passing registers for MIPS.
The calling convention we assume is that the first four arguments to
a function are always passed through these registers. The functions
view shift then copies these registers into "dedicated" registers or
on to the stack depending on whether or not they escape. All other
arguments are passed by the caller on the stack, and the callee accesses
them directly from the frame pointer (it does not copy them into it's
own stack).

[Type Checker Comments]

[[Points of Interest]]
Our type-checker is accompanied by a test-suite of 73 unit tests. Run them!

  - CM.make "sources.cm";
  - Tests.run ();

Instead of providing a Main module, we've provided a Tiger module that allows
easy compiltation of files or strings from the SML REPL:

  - Tiger.compileFile "testcases/test16.tig";
  testcases/test16.tig:4.1 Error: Cannot resolve cyclic type declarations: a,
  b, c, d
  val it = {exp=(),ty=STRING} : {exp:Translate.exp, ty:Types.ty}

  - Tiger.compileStr "1";
  val it = {exp=(),ty=INT} : {exp:Translate.exp, ty:Types.ty}

We've rewritten large parts of the boiler-plate provided by Appel. Specifically:
  * errormsg.sml
    We've created an Error structure that provides type constructors for describing
    static program errors. This allows for clean, robust checking of lexing, parsing
    and type errors. Instead of immediately printing all errors, static errors are
    logged and may be displayed or tested for by a testing module.
    The error reporting syntax is compatible with SML's own error reporting, meaning
    errors are properly interpreted by emacs.
  * absyn.sml
    We've provided each syntax type with a position argument for better error reporting.
  * types.sml
    This has been augmented with a TOP and BOTTOM type for the type lattice as well as
    toString, equalTy and various type lattice operations.
  * symbol.sml, table.sml, table.sig
    The Symbol module was extended with a fold{l,r} friendly enter' function, similar to
    ORD_MAP.insert'. A Symbol.entries function was also added to output the contents of
    a Symbol table to facilitate debugging.

[Parser Comments]

[[Shift Reduce Conflicts]]
  We eliminated a large body of conflicts intially by simply adding the
  appropriate precedence rules for all the binary operators.

Conflict: Shift TypeDec/FunDec, Reduce TypeDecs/FunDecs to Dec
  Resolved by giving the Dec -> TypeDecs and Dec -> FunDecs rules
  the lowest precedence. This tells the parser to always shift
  more TypeDec/FunDec inside the TypeDecs -> TypeDecs TypeDec and
  FunDecs -> FunDecs FunDec rules.

Conflict: Shift LBRACK, Reduce ID to LValue
  Originally, our grammar for LVALUE was the following:
    Exp : ...
        | ID LBRACK Exp RBRACK OF Exp (1)
        | ...
    LValue : ID (2)
           | LValue DOT ID (3)
           | LValue LBRACK Exp RBRACK (4)
  Resolving the conflict in favor of either rule precludes the other rule from
  ever matching (if ID is immediately reduced to an LValue, rule (1) will never
  match and if an LBRACK is shifted after seeing an ID, rule (4) will never
  match). To resolve this, we need to push ID LBRACK Exp RBRACK all onto the
  stack before making the decision to reduce. We delay this reduction decision
  by adding another production to LValue:
    LValue : ID (2)
           | ...
           | ID LBRACK Exp RBRACK (5)
  This however introduces two shift reduce/conflicts. One between shifting
  LBRACK and reducing ID to LValue, which was resolved by giving LBRACK a higer
  precedence than ID. The second conflict is between shifting OF and reducing
  by rule (5) which we resolve by giving precedence to OF.

[[Points of Interest]]
  In the interest of better error reporting down the line we modified Appel's
  Absyn struct to provide positions for Nil expressions and Int expressions.

  We've provided a testing script which tests the parser against a few choice
  testcases whose output has been manually validated. Just run:
    $ ./test.sh

[Lexer Comments]

[[Comment Handling]]
When a /* is encountered, the lexer enters the COMMENT state and increments the
commentDepth variable. While in the COMMENT state, subsequent /*'s increment
commentDepth and */'s decrement commentDepth; all other characters are ignored.
When commentDepth is decremented down to zero, the lexer returns to the INITIAL
state.

[[Error Handling]]
When a lexing error is encountered, it is reported with the corresponding line
number and the lexer continues lexing. The following error cases are handled:

  1. Illegal string charaters, escape sequences - The offending character are
ignored and the lexer is returned to the STRING state.
  2. Illegal feed characters - While creating a multiline string, non-whitespace
characters are ignored and the lexer returns to the FEED state.
  3. Unclosed comments and strings - commentStartPos and
StringTokenBuilde.startPos facilitate the reporting of accurate line numbers
for unclosed comments and strings.

Error reporting is handled by Appel's ErrorMsg module.

[[End-of-file Handling]]
The commentDepth and StringTokenBuilder.inString variables are used to determine
if the lexer is in the middle of an incomplete comment or string when the input
ends. If so, the appropriate error is reported. The lexer also resets all the
variables necessary for subsequent parses to be successful (ie, reaching EOF
inside of a comment or string does not leave the lexer in an undefined state).

[[Other Interesting Points]]
The lexer uses a keyword lookup table to differentiate identifiers and keywords,
thus minimizing the number of states needed by the lexer.
